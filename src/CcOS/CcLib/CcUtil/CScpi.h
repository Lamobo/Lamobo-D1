/**
* @author         Andreas Dirmeier
*
* <br>copyright   (c) Technische Software Entwicklung Plazotta © 2014
*
* <br>Version     1.00
*
* <br>Language    C++ ANSI V3
*
* <br>History
*   15.12.2015 / AD
*      Changed to TCP Connection
*/
/**
*   @file       CScpi.h
*   @brief      Simple Scpi-Receiver
**************************************************************************/
#if !defined (_CSCPI_H)
#define _CSCPI_H


#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <string>

#define SCPI_BUFLEN 128 ///< Max buffer-length of receiving scpi-transfer-data

/**
 * @brief Definition for a "String request and response" function
 */
typedef void(*_StrCallback)(std::string Request, std::string*Response);

class CScpi
{
public:

  /**
  * @brief Default constructor
  */
  CScpi(void);

  /**
  * @brief Destructor
  */
  ~CScpi(void);

  /**
  *@brief Initializes the mailslot client
  *
  *@return TRUE - if successfully initiated
  */
  BOOL Init(void);

  /*
  *@brief Denitializes the mailslot client
  */
  void Deinit(void);

  /**
   * @brief Set Receiver for raw connection-data
   * @param pFunction: Pointer to handling function
   */
  void SetRawReceiver(_StrCallback pFunction){
    m_RawReceiver = pFunction;
  }
  /**
  *  @brief write to TCP connection
  *
  *  @param pData: pointer to Write-buffer
  *  @param iLengh: size of Write-buffer
  */
  BOOL Run(void);

  /**
   * @brief Create Socket and Listen on income
   * @return true if no error occures
   */
  bool InitSocket(void);
  /**
   * @brief Handle In- and Ouputs until Client closes connections.
   * @return true if no error occures
   */
  bool LoopReceive(void);

private:
  HANDLE m_hFile;             ///< Handle used by the mailslot
  _StrCallback m_RawReceiver; ///< Function-Pointer to Receifing function
  SOCKET m_ClientSocket;      ///< ClientSocket generated by InitSocket
};
#endif // _CSCPI_H