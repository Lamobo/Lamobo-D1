/**
 * @copyright  Andreas Dirmeier (C) 2015
 *
 * This file is part of CcOS.
 *
 * CcOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CcOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CcOS.  If not, see <http://www.gnu.org/licenses/>.
 **/
/**
 * @author     Andreas Dirmeier
* @version    0.01
* @date       2015-10
* @par        Language   C++ ANSI V3
* @file     WindowsSocket.h
* @brief    Class WindowsSocket
*/
#ifndef WindowsSocket_H_
#define WindowsSocket_H_

#include "CcBase.h"
#include "com/CcSocket.h"
#include <winsock2.h>
#include <ws2tcpip.h>

/**
* @brief Create a Socket on Windows Systems
*/
class WindowsSocket : public CcSocket{
public:
  /**
  * @brief Constructor
  */
  WindowsSocket( eSocketType type = eTCP );

  WindowsSocket(SOCKET socket, sockaddr sockAddr, int sockAddrlen);
  /**
   * @brief Destructor
   */
  virtual ~WindowsSocket( void );

  bool open(uint16){ return true; }
  bool close();
  bool cancel();

  /**
   * @brief connect to Host with known IP-Address and Port
   * @param ipAdress: IpAddress of Host
   * @param Port:     Port where host ist waiting for connection
   * @return true if connection was successfully established
   */
  bool bind(ipv4_t ipAddress, uint16 Port);

  /**
   * @brief connect to Host with known Name in Network and Port
   * @param hostName: Name of Host to connect to
   * @param Port:     Port where host ist waiting for connection
   * @return true if connection was successfully established
   */
  bool connect(ipv4_t ipAddress, uint16 Port);

  /**
  * @brief connect to Host with known Name in Network and Port
  * @param hostName: Name of Host to connect to
  * @param Port:     Port where host ist waiting for connection
  * @return true if connection was successfully established
  */
  bool connect(CcString& hostName, CcString &hostPort);

  /**
   * @brief Socket becomes a Host and listen on Port
   * @return true if port is successfully initiated.
   */
  bool listen(void);

  /**
   * @brief Waiting for an incoming connection.
   * @return Valid socket if connection established, otherwise 0.
   */
  CcSocket* accept(void);

  /**
   * @brief Send data to established socket-connection
   * @param buf: Buffer of data to be send
   * @param bufSize: size of buffer to send
   * @return return true if transmission succeeded.
   */
  size_t write(char *buf, size_t bufSize);

  /**
   * @brief Receive incoming data from socket
   * @param buf: Buffer to store received data.
   * @param bufSize: maximum size of buffer;
   * @return Size of data read from socket.
   */
  size_t read(char *buf, size_t bufSize);

  /**
   * @brief read with timeout
   */
  size_t readTimeout(char *buf, size_t bufSize, time_t timeout = 10);

  /**
   * @brief Get ip-address of Hostname
   * @param hostname: Hostname as String to search for
   * @param addr [out]: found ip-address or 0.0.0.0 if failed
   * @return
   */
  bool getHostByName(CcString &hostname, ipv4_t *addr);

  static void startWSA(void);
private:
  eSocketType   m_Type;
  SOCKET        m_ClientSocket;      ///< ClientSocket generated by InitSocket
  sockaddr      m_sockAddr;
  int           m_sockAddrlen;
  static bool   g_sWsaStarted;
};

#endif /* WindowsSocket_H_ */
